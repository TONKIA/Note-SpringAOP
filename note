AOP Aspect Oriented Programming（面向切面编程）

Spring框架使用代理机制实现AOP

AOP所需jar包：
aopalliance.jar
aspectjweaver.jar
cglib.jar
spring-aop.jar
spring-aspects.jar

代理对象的创建使用 JDK动态代理或者CGLIB代理实现
|-JDK动态代理 代理对象必须实现接口
|-CGLIB代理实现 开源项目 创建子类对象，不能对final修饰的类和方法进行代理

AOP术语
JoninPoint 连接点：
			可以插入横切功能的扩展点。
			对象构造函数的前后、方法调用的前后、字段访问或处理异常时等。
			*Spring中仅仅支持方法调用做为连接点。
PointCut 切入点、切点：
			表示需要插入横切功能的一系列的连接点。
Advice 通知、增强：
			横切的逻辑功能。
Aspect 切面、方面：
			通常是Advic、PointCut的组合，既包括了横切逻辑，也包括了切点的定义。
			Spring AOP负责将切面所定义的横切逻辑织读到对应的切点上。
Target 目标：
			表示将要被添加横切逻辑的的目标对象。
Weaving 织入：

总体
根据PointCut的定义在Target的JoinPoint处Weaving Advice
Aspect = PointCut + Advice

Advice :前置增强、后置增强、环绕增强。

<aop:config>内必须顺序出现<aop:pointcut><aop:advisor><aop:aspect>
<aop:pointcut>定义切点 只有方法
<aop:advisor>定义只包含一个增强和一个切点的切面
<aop:aspect>可以包涵多个切点和增强			
			
expression属性值使用AspectJ的语法描述做为其切点的目标*方法
execution(modifiers? returnType methodName(paramTypes))

示例
execution(public * *(..))
execution(* set*(..))
execution(* com.tonkia.service.*(..))

OLTP Online Transaciton Process 在线事务处理
--------------------------------------------------------
Advisor定义只包含一个增强和一个切点的切面
其中增强需要实现一下接口
MethodBeforeAdvice 前置增强
AfterReturningAdvice 后置增强
ThrowsAdvice 异常增强
MethodInterceptor 环绕增强
--------------------------------------------------------

Propagation类的事务属性详解： 

REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 

SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 

MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 

REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 

NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 

NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 

NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。 